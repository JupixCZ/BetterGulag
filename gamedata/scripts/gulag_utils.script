local JOB_TYPE_GUARD = 300
local JOB_TYPE_PASSIVE = 200
local JOB_TYPE_PLAIN = 201
local JOB_TYPE_CAMP = 202
local JOB_TYPE_NIGHT = 203
local JOB_TYPE_RAINCOVER = 204

local WEATHER_CLEAR = "clear"
local WEATHER_PARTLY = "partly"
local WEATHER_CLOUDY = "cloudy"
local WEATHER_CLOUDY_NO_SUN = "cloudy_no_sun"
local WEATHER_FOGGY = "foggy"
local WEATHER_FOGGY_NO_SUN = "foggy_no_sun"
local WEATHER_RAIN = "rain"
local WEATHER_STORM = "storm"
local WEATHER_THUNDER = "thunder"
local WEATHER_VERYFOGGY = "veryfoggy"
local WEATHER_VERYFOGGY_NO_SUN = "veryfoggy_no_sun"

local function roll(chance_percentile)
    return math.random(1, 100) <= chance_percentile
end

local function is_night()
    return in_time_interval(21, 7)
end

local function is_weather_bad(weather_string)
    return string.match(weather_string, WEATHER_RAIN)
            or string.match(weather_string, WEATHER_STORM)
            or string.match(weather_string, WEATHER_THUNDER)
end

local function job_avail_to_npc(npc_info, job, smart)
    --[[
    if (smart.dead_time[job.section]) then
        return false
    end
    --]]

    local precond = gulag_general.get_job_precondition(job)
    if (precond) then
        return precond(npc_info.se_obj, smart, job, npc_info)
    end

    return true
end

function get_optimal_passive_job_type()
    local optimal_passive_job_type = JOB_TYPE_PLAIN

    printf("choosing job")

    local weather_string = level.get_weather()
    local day = is_night() == false

    local primary_job_type = JOB_TYPE_PLAIN
    local primary_job_chance = 0

    local alt_job_type

    if (day) then
        if is_weather_bad(weather_string) then alt_job_type = JOB_TYPE_RAINCOVER else alt_job_type = JOB_TYPE_CAMP end
    else
    -- might be raincover_night?
        if is_weather_bad(weather_string) then alt_job_type = JOB_TYPE_RAINCOVER else alt_job_type = JOB_TYPE_NIGHT end
    end

    if (string.match(weather_string, WEATHER_CLEAR)) then
        if (day) then primary_job_chance = 100 else primary_job_chance = 35 end
    elseif (string.match(weather_string, WEATHER_PARTLY)) then
        if (day) then primary_job_chance = 100 else primary_job_chance = 30 end
    elseif (string.match(weather_string, WEATHER_CLOUDY)) then
        if (day) then primary_job_chance = 80 else primary_job_chance = 25 end
    elseif (string.match(weather_string, WEATHER_CLOUDY_NO_SUN)) then
        if (day) then primary_job_chance = 75 else primary_job_chance = 25 end
    elseif (string.match(weather_string, WEATHER_FOGGY)) then
        if (day) then primary_job_chance = 70 else primary_job_chance = 20 end
    elseif (string.match(weather_string, WEATHER_FOGGY_NO_SUN)) then
        if (day) then primary_job_chance = 65 else primary_job_chance = 20 end
    elseif (string.match(weather_string, WEATHER_THUNDER)) then
        if (day) then primary_job_chance = 60 else primary_job_chance = 15 end
    elseif (string.match(weather_string, WEATHER_VERYFOGGY)) then
        if (day) then primary_job_chance = 40 else primary_job_chance = 10 end
    elseif (string.match(weather_string, WEATHER_RAIN)) then
        if (day) then primary_job_chance = 30 else primary_job_chance = 10 end
    elseif (string.match(weather_string, WEATHER_VERYFOGGY_NO_SUN)) then
        if (day) then primary_job_chance = 25 else primary_job_chance = 10 end
    elseif (string.match(weather_string, WEATHER_STORM)) then
        primary_job_chance = 5
    end

    printf("Weather: " .. weather_string .. " , rolling for job " .. primary_job_type .. " with a chance of " .. primary_job_chance .. "%")

    -- rolling for job type
    if (roll(primary_job_chance)) then
        optimal_passive_job_type = primary_job_type
        printf("TAKING THE JOB!")
    else
        optimal_passive_job_type = alt_job_type
        printf("TAKING ALTERNATIVE JOB!")
    end

    return optimal_passive_job_type
end

function has_free_jobs(smart, jobs, npc_info)
    return table.getn(extract_free_jobs_only(smart, jobs, npc_info)) ~= 0
end

function extract_free_jobs_only(smart, jobs, npc_info)
    local free_jobs = {}
    local free_jobs_index = 1

    for index, job in ipairs(jobs) do
        local current_occupying_npc_id = smart.npc_by_job_section[job.section]

        -- countering strange behaviour after spawn (npc is occupying job but stil his job == null)
        if ((current_occupying_npc_id == nil or current_occupying_npc_id == npc_info.se_obj.id) and job_avail_to_npc(npc_info, job, smart)) then
            free_jobs[free_jobs_index] = job
            free_jobs_index = free_jobs_index + 1
        end
    end

    return free_jobs
end

function get_ideal_job_type(smart, npc_info, guard_jobs, passive_jobs)
    local job_guard_count = table.getn(guard_jobs) - table.getn(extract_free_jobs_only(smart, guard_jobs, npc_info))
    local job_passive_count = table.getn(passive_jobs) - table.getn(extract_free_jobs_only(smart, passive_jobs, npc_info))

    local guard_job_chance = 90 - (job_guard_count * 40) + (job_passive_count * 5)

    if (guard_job_chance < 10) then guard_job_chance = 10
    elseif (guard_job_chance > 90) then guard_job_chance = 90
    end

    if (roll(guard_job_chance)) then return JOB_TYPE_GUARD
    else return JOB_TYPE_PASSIVE
    end

end

-- TODO heavy refactor
function get_free_job(smart, job_type, npc_info)
    local jobs_table

    if (job_type == JOB_TYPE_GUARD) then
        jobs_table = smart.stalker_guard_jobs
    elseif (job_type == JOB_TYPE_PASSIVE) then
        local passive_job_type = get_optimal_passive_job_type()

        if (passive_job_type == JOB_TYPE_PLAIN) then
            jobs_table = smart.stalker_plain_jobs
        elseif (passive_job_type == JOB_TYPE_CAMP) then
            jobs_table = smart.stalker_camp_jobs
        elseif (passive_job_type == JOB_TYPE_RAINCOVER) then
            -- RAINCOVER not implemented yet
            jobs_table = smart.stalker_night_jobs
        else
            jobs_table = smart.stalker_night_jobs
        end

        local found_free_preferred_jobs = table.getn(jobs_table) ~= 0 and has_free_jobs(smart, jobs_table, npc_info)

        if (not found_free_preferred_jobs and passive_job_type ~= JOB_TYPE_PLAIN) then
            jobs_table = smart.stalker_plain_jobs
        end
    else
        jobs_table = smart.stalker_generic_jobs
    end

    -- TODO rework all this shit - too many extracting dammit!
    local free_jobs = extract_free_jobs_only(smart, jobs_table, npc_info)
    local free_jobs_count = table.getn(free_jobs)
    if (free_jobs_count == 0) then
        return nil
    end

    local job_rand_index = math.random(1, free_jobs_count)
    return free_jobs[job_rand_index]
end