local JOB_TYPE_GUARD = 300
local JOB_TYPE_PASSIVE = 200
local JOB_TYPE_FREE = 201
local JOB_TYPE_CAMP = 202

local TIME_DAY = "day"
local TIME_NIGHT = "night"

local function roll(chance_percentile)
    return math.random(1, 100) <= chance_percentile
end

local function is_day()
    return in_time_interval(6, 20)
end

local function job_avail_to_npc(npc_info, job, smart)
    --[[
    if (smart.dead_time[job.section]) then
        return false
    end
    --]]

    local precond = gulag_general.get_job_precondition(job)
    if (precond) then
        return precond(npc_info.se_obj, smart, job, npc_info)
    end

    return true
end

function get_optimal_passive_job_type()

    local camp_chance = 80

    if (is_day()) then
        camp_chance = 40
    end

    if (roll(camp_chance)) then
        printf("[INFO] Picked CAMP job")
        return JOB_TYPE_CAMP
    else
        printf("[INFO] Picked FREE job")
        return JOB_TYPE_FREE
    end

end

function has_free_jobs(smart, jobs, npc_info)
    return table.getn(extract_free_jobs_only(smart, jobs, npc_info)) ~= 0
end

function extract_free_jobs_only(smart, jobs, npc_info)
    local free_jobs = {}
    local free_jobs_index = 1

    for index, job in ipairs(jobs) do
        local current_occupying_npc_id = smart.npc_by_job_section[job.section]

        -- countering strange behaviour after spawn (npc is occupying job but stil his job == null)
        if ((current_occupying_npc_id == nil or current_occupying_npc_id == npc_info.se_obj.id) and job_avail_to_npc(npc_info, job, smart)) then
            free_jobs[free_jobs_index] = job
            free_jobs_index = free_jobs_index + 1
        end
    end

    return free_jobs
end

function is_should_take_guard_job(smart, npc_info, guard_jobs, passive_jobs)
    local job_guard_count = table.getn(guard_jobs) - table.getn(extract_free_jobs_only(smart, guard_jobs, npc_info))
    local job_passive_count = table.getn(passive_jobs) - table.getn(extract_free_jobs_only(smart, passive_jobs, npc_info))

    local guard_job_chance = 90 - (job_guard_count * 40) + (job_passive_count * 5)

    if (guard_job_chance < 10) then guard_job_chance = 10
    elseif (guard_job_chance > 90) then guard_job_chance = 90
    end

    return roll(guard_job_chance)
end

function decide_optimal_passive_job_type(smart, npc_info)
    local jobs_table

    local job_type = get_optimal_passive_job_type()

    -- TODO job table
    if (job_type == JOB_TYPE_FREE) then
        jobs_table = smart.stalker_free_jobs
    else
        jobs_table = smart.stalker_camp_jobs
    end

    local tried_free_job = false
    local tried_camp_job = false
    local keep_trying = true

    -- uneccesary while caused by previous code revision
    while keep_trying do
        local found_free_jobs = table.getn(jobs_table) ~= 0 and has_free_jobs(smart, jobs_table, npc_info)

        if (found_free_jobs) then
            keep_trying = false
        else
            if (job_type == JOB_TYPE_FREE) then tried_free_job = true
            elseif (job_type == JOB_TYPE_CAMP) then tried_camp_job = true
            end

            if (tried_free_job and tried_camp_job) then
                keep_trying = false
            else
                if (tried_free_job == false) then
                    jobs_table = smart.stalker_free_jobs
                    job_type = JOB_TYPE_FREE
                else
                    jobs_table = smart.stalker_camp_jobs
                    job_type = JOB_TYPE_CAMP
                end
            end
        end
    end

    return jobs_table
end

function get_free_job(smart, job_type, npc_info)
    local jobs_table

    if (job_type == JOB_TYPE_GUARD) then
        jobs_table = smart.stalker_guard_jobs
    elseif (job_type == JOB_TYPE_PASSIVE) then
        jobs_table = decide_optimal_passive_job_type(smart, npc_info)
    else
        jobs_table = smart.stalker_generic_jobs
        printf("[WARN] Unknow job type, assigning generic job.")
    end

    if (jobs_table == nil) then
        printf("[INFO] No free job - returning nil.")
        return nil
    end

    local free_jobs = extract_free_jobs_only(smart, jobs_table, npc_info)
    local free_jobs_count = table.getn(free_jobs)
    if (free_jobs_count == 0) then
        printf("[WARN] Still couldn't find any free job! Returning nil.")
        return nil
    end

    local job_rand_index = math.random(1, free_jobs_count)
    return free_jobs[job_rand_index]
end

function is_external_conditions_changed(npc_info)
    local current_time_day

    -- TODO surge

    if (is_day()) then current_time_day = TIME_DAY else current_time_day = TIME_NIGHT end

    if (npc_info.current_time_day == nil) then
        npc_info.current_time_day = current_time_day
    end

    if (current_time_day ~= npc_info.current_time_day) then
        npc_info.current_time_day = current_time_day

        --printf("[INFO] External conditions changed.")
        return true
    else
        return false
    end
end

function npc_re_evaluate_current_job_persistance(persistance)
    local cut_percentage = math.random(40, 80)
    local new_persistance = persistance * cut_percentage / 100

    if (new_persistance < 1) then new_persistance = 1 end

    --printf("[INFO] Cutting persist from " .. persistance .. " to " .. new_persistance .. "(" .. cut_percentage .. "%)")
    return new_persistance
end